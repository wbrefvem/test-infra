// Code generated by protoc-gen-go. DO NOT EDIT.
// source: git_service.proto

package scallywag

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GitServiceClient is the client API for GitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitServiceClient interface {
	InitializeProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*Provider, error)
	UpdateIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	ListRepositories(ctx context.Context, in *Organization, opts ...grpc.CallOption) (GitService_ListRepositoriesClient, error)
	CreateRepository(ctx context.Context, in *RepositoryInfo, opts ...grpc.CallOption) (*Repository, error)
	GetRepository(ctx context.Context, in *RepositoryInfo, opts ...grpc.CallOption) (*Repository, error)
	DeleteRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Confirmation, error)
	ForkRepository(ctx context.Context, in *ForkInfo, opts ...grpc.CallOption) (*Repository, error)
	RenameRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Repository, error)
	ValidateRepositoryName(ctx context.Context, in *RepositoryInfo, opts ...grpc.CallOption) (*Confirmation, error)
	CreatePullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullRequest, error)
	UpdatePullRequestStatus(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*Confirmation, error)
	GetPullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullRequest, error)
	GetPullRequestCommits(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (GitService_GetPullRequestCommitsClient, error)
	PullRequestLastCommitStatus(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*Commit, error)
	ListCommitStatus(ctx context.Context, in *Commit, opts ...grpc.CallOption) (GitService_ListCommitStatusClient, error)
	UpdateCommitStatus(ctx context.Context, in *CommitStatus, opts ...grpc.CallOption) (*CommitStatus, error)
	MergePullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*Confirmation, error)
	CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Confirmation, error)
	ListWebhooks(ctx context.Context, in *Repository, opts ...grpc.CallOption) (GitService_ListWebhooksClient, error)
	UpdateWebHook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (GitService_UpdateWebHookClient, error)
	GetIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	SearchIssues(ctx context.Context, in *IssueQuery, opts ...grpc.CallOption) (*Issue, error)
	CreateIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error)
	HasIssues(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Confirmation, error)
	AddPRComment(ctx context.Context, in *PullRequestComment, opts ...grpc.CallOption) (*PullRequestComment, error)
	CreateIssueComment(ctx context.Context, in *IssueComment, opts ...grpc.CallOption) (*IssueComment, error)
	UpdateRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Confirmation, error)
	ListReleases(ctx context.Context, in *Repository, opts ...grpc.CallOption) (GitService_ListReleasesClient, error)
}

type gitServiceClient struct {
	cc *grpc.ClientConn
}

func NewGitServiceClient(cc *grpc.ClientConn) GitServiceClient {
	return &gitServiceClient{cc}
}

func (c *gitServiceClient) InitializeProvider(ctx context.Context, in *Provider, opts ...grpc.CallOption) (*Provider, error) {
	out := new(Provider)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/InitializeProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) UpdateIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListRepositories(ctx context.Context, in *Organization, opts ...grpc.CallOption) (GitService_ListRepositoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitService_serviceDesc.Streams[0], "/scallywag.GitService/ListRepositories", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceListRepositoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_ListRepositoriesClient interface {
	Recv() (*Repository, error)
	grpc.ClientStream
}

type gitServiceListRepositoriesClient struct {
	grpc.ClientStream
}

func (x *gitServiceListRepositoriesClient) Recv() (*Repository, error) {
	m := new(Repository)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitServiceClient) CreateRepository(ctx context.Context, in *RepositoryInfo, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetRepository(ctx context.Context, in *RepositoryInfo, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) DeleteRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/DeleteRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ForkRepository(ctx context.Context, in *ForkInfo, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/ForkRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) RenameRepository(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/RenameRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ValidateRepositoryName(ctx context.Context, in *RepositoryInfo, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/ValidateRepositoryName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CreatePullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullRequest, error) {
	out := new(PullRequest)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/CreatePullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) UpdatePullRequestStatus(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/UpdatePullRequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetPullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*PullRequest, error) {
	out := new(PullRequest)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/GetPullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) GetPullRequestCommits(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (GitService_GetPullRequestCommitsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitService_serviceDesc.Streams[1], "/scallywag.GitService/GetPullRequestCommits", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceGetPullRequestCommitsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_GetPullRequestCommitsClient interface {
	Recv() (*Commit, error)
	grpc.ClientStream
}

type gitServiceGetPullRequestCommitsClient struct {
	grpc.ClientStream
}

func (x *gitServiceGetPullRequestCommitsClient) Recv() (*Commit, error) {
	m := new(Commit)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitServiceClient) PullRequestLastCommitStatus(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*Commit, error) {
	out := new(Commit)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/PullRequestLastCommitStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListCommitStatus(ctx context.Context, in *Commit, opts ...grpc.CallOption) (GitService_ListCommitStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitService_serviceDesc.Streams[2], "/scallywag.GitService/ListCommitStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceListCommitStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_ListCommitStatusClient interface {
	Recv() (*CommitStatus, error)
	grpc.ClientStream
}

type gitServiceListCommitStatusClient struct {
	grpc.ClientStream
}

func (x *gitServiceListCommitStatusClient) Recv() (*CommitStatus, error) {
	m := new(CommitStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitServiceClient) UpdateCommitStatus(ctx context.Context, in *CommitStatus, opts ...grpc.CallOption) (*CommitStatus, error) {
	out := new(CommitStatus)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/UpdateCommitStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) MergePullRequest(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/MergePullRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CreateWebhook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/CreateWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListWebhooks(ctx context.Context, in *Repository, opts ...grpc.CallOption) (GitService_ListWebhooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitService_serviceDesc.Streams[3], "/scallywag.GitService/ListWebhooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceListWebhooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_ListWebhooksClient interface {
	Recv() (*Webhook, error)
	grpc.ClientStream
}

type gitServiceListWebhooksClient struct {
	grpc.ClientStream
}

func (x *gitServiceListWebhooksClient) Recv() (*Webhook, error) {
	m := new(Webhook)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitServiceClient) UpdateWebHook(ctx context.Context, in *Webhook, opts ...grpc.CallOption) (GitService_UpdateWebHookClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitService_serviceDesc.Streams[4], "/scallywag.GitService/UpdateWebHook", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceUpdateWebHookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_UpdateWebHookClient interface {
	Recv() (*Webhook, error)
	grpc.ClientStream
}

type gitServiceUpdateWebHookClient struct {
	grpc.ClientStream
}

func (x *gitServiceUpdateWebHookClient) Recv() (*Webhook, error) {
	m := new(Webhook)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gitServiceClient) GetIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) SearchIssues(ctx context.Context, in *IssueQuery, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/SearchIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CreateIssue(ctx context.Context, in *Issue, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) HasIssues(ctx context.Context, in *Repository, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/HasIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) AddPRComment(ctx context.Context, in *PullRequestComment, opts ...grpc.CallOption) (*PullRequestComment, error) {
	out := new(PullRequestComment)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/AddPRComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) CreateIssueComment(ctx context.Context, in *IssueComment, opts ...grpc.CallOption) (*IssueComment, error) {
	out := new(IssueComment)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/CreateIssueComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) UpdateRelease(ctx context.Context, in *Release, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/scallywag.GitService/UpdateRelease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitServiceClient) ListReleases(ctx context.Context, in *Repository, opts ...grpc.CallOption) (GitService_ListReleasesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GitService_serviceDesc.Streams[5], "/scallywag.GitService/ListReleases", opts...)
	if err != nil {
		return nil, err
	}
	x := &gitServiceListReleasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GitService_ListReleasesClient interface {
	Recv() (*Release, error)
	grpc.ClientStream
}

type gitServiceListReleasesClient struct {
	grpc.ClientStream
}

func (x *gitServiceListReleasesClient) Recv() (*Release, error) {
	m := new(Release)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GitServiceServer is the server API for GitService service.
type GitServiceServer interface {
	InitializeProvider(context.Context, *Provider) (*Provider, error)
	UpdateIssue(context.Context, *Issue) (*Issue, error)
	ListRepositories(*Organization, GitService_ListRepositoriesServer) error
	CreateRepository(context.Context, *RepositoryInfo) (*Repository, error)
	GetRepository(context.Context, *RepositoryInfo) (*Repository, error)
	DeleteRepository(context.Context, *Repository) (*Confirmation, error)
	ForkRepository(context.Context, *ForkInfo) (*Repository, error)
	RenameRepository(context.Context, *Repository) (*Repository, error)
	ValidateRepositoryName(context.Context, *RepositoryInfo) (*Confirmation, error)
	CreatePullRequest(context.Context, *PullRequest) (*PullRequest, error)
	UpdatePullRequestStatus(context.Context, *PullRequest) (*Confirmation, error)
	GetPullRequest(context.Context, *PullRequest) (*PullRequest, error)
	GetPullRequestCommits(*PullRequest, GitService_GetPullRequestCommitsServer) error
	PullRequestLastCommitStatus(context.Context, *PullRequest) (*Commit, error)
	ListCommitStatus(*Commit, GitService_ListCommitStatusServer) error
	UpdateCommitStatus(context.Context, *CommitStatus) (*CommitStatus, error)
	MergePullRequest(context.Context, *PullRequest) (*Confirmation, error)
	CreateWebhook(context.Context, *Webhook) (*Confirmation, error)
	ListWebhooks(*Repository, GitService_ListWebhooksServer) error
	UpdateWebHook(*Webhook, GitService_UpdateWebHookServer) error
	GetIssue(context.Context, *Issue) (*Issue, error)
	SearchIssues(context.Context, *IssueQuery) (*Issue, error)
	CreateIssue(context.Context, *Issue) (*Issue, error)
	HasIssues(context.Context, *Repository) (*Confirmation, error)
	AddPRComment(context.Context, *PullRequestComment) (*PullRequestComment, error)
	CreateIssueComment(context.Context, *IssueComment) (*IssueComment, error)
	UpdateRelease(context.Context, *Release) (*Confirmation, error)
	ListReleases(*Repository, GitService_ListReleasesServer) error
}

func RegisterGitServiceServer(s *grpc.Server, srv GitServiceServer) {
	s.RegisterService(&_GitService_serviceDesc, srv)
}

func _GitService_InitializeProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).InitializeProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/InitializeProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).InitializeProvider(ctx, req.(*Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_UpdateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).UpdateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/UpdateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).UpdateIssue(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListRepositories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Organization)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).ListRepositories(m, &gitServiceListRepositoriesServer{stream})
}

type GitService_ListRepositoriesServer interface {
	Send(*Repository) error
	grpc.ServerStream
}

type gitServiceListRepositoriesServer struct {
	grpc.ServerStream
}

func (x *gitServiceListRepositoriesServer) Send(m *Repository) error {
	return x.ServerStream.SendMsg(m)
}

func _GitService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreateRepository(ctx, req.(*RepositoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetRepository(ctx, req.(*RepositoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_DeleteRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).DeleteRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/DeleteRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).DeleteRepository(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ForkRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ForkRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/ForkRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ForkRepository(ctx, req.(*ForkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_RenameRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).RenameRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/RenameRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).RenameRepository(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ValidateRepositoryName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepositoryInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).ValidateRepositoryName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/ValidateRepositoryName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).ValidateRepositoryName(ctx, req.(*RepositoryInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CreatePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreatePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/CreatePullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreatePullRequest(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_UpdatePullRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).UpdatePullRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/UpdatePullRequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).UpdatePullRequestStatus(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetPullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetPullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/GetPullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetPullRequest(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_GetPullRequestCommits_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).GetPullRequestCommits(m, &gitServiceGetPullRequestCommitsServer{stream})
}

type GitService_GetPullRequestCommitsServer interface {
	Send(*Commit) error
	grpc.ServerStream
}

type gitServiceGetPullRequestCommitsServer struct {
	grpc.ServerStream
}

func (x *gitServiceGetPullRequestCommitsServer) Send(m *Commit) error {
	return x.ServerStream.SendMsg(m)
}

func _GitService_PullRequestLastCommitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).PullRequestLastCommitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/PullRequestLastCommitStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).PullRequestLastCommitStatus(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListCommitStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Commit)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).ListCommitStatus(m, &gitServiceListCommitStatusServer{stream})
}

type GitService_ListCommitStatusServer interface {
	Send(*CommitStatus) error
	grpc.ServerStream
}

type gitServiceListCommitStatusServer struct {
	grpc.ServerStream
}

func (x *gitServiceListCommitStatusServer) Send(m *CommitStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _GitService_UpdateCommitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).UpdateCommitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/UpdateCommitStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).UpdateCommitStatus(ctx, req.(*CommitStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_MergePullRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).MergePullRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/MergePullRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).MergePullRequest(ctx, req.(*PullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/CreateWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreateWebhook(ctx, req.(*Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListWebhooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Repository)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).ListWebhooks(m, &gitServiceListWebhooksServer{stream})
}

type GitService_ListWebhooksServer interface {
	Send(*Webhook) error
	grpc.ServerStream
}

type gitServiceListWebhooksServer struct {
	grpc.ServerStream
}

func (x *gitServiceListWebhooksServer) Send(m *Webhook) error {
	return x.ServerStream.SendMsg(m)
}

func _GitService_UpdateWebHook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Webhook)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).UpdateWebHook(m, &gitServiceUpdateWebHookServer{stream})
}

type GitService_UpdateWebHookServer interface {
	Send(*Webhook) error
	grpc.ServerStream
}

type gitServiceUpdateWebHookServer struct {
	grpc.ServerStream
}

func (x *gitServiceUpdateWebHookServer) Send(m *Webhook) error {
	return x.ServerStream.SendMsg(m)
}

func _GitService_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).GetIssue(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_SearchIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).SearchIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/SearchIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).SearchIssues(ctx, req.(*IssueQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/CreateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreateIssue(ctx, req.(*Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_HasIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Repository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).HasIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/HasIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).HasIssues(ctx, req.(*Repository))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_AddPRComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullRequestComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).AddPRComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/AddPRComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).AddPRComment(ctx, req.(*PullRequestComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_CreateIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueComment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).CreateIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/CreateIssueComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).CreateIssueComment(ctx, req.(*IssueComment))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_UpdateRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Release)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitServiceServer).UpdateRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scallywag.GitService/UpdateRelease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitServiceServer).UpdateRelease(ctx, req.(*Release))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitService_ListReleases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Repository)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GitServiceServer).ListReleases(m, &gitServiceListReleasesServer{stream})
}

type GitService_ListReleasesServer interface {
	Send(*Release) error
	grpc.ServerStream
}

type gitServiceListReleasesServer struct {
	grpc.ServerStream
}

func (x *gitServiceListReleasesServer) Send(m *Release) error {
	return x.ServerStream.SendMsg(m)
}

var _GitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scallywag.GitService",
	HandlerType: (*GitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitializeProvider",
			Handler:    _GitService_InitializeProvider_Handler,
		},
		{
			MethodName: "UpdateIssue",
			Handler:    _GitService_UpdateIssue_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _GitService_CreateRepository_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _GitService_GetRepository_Handler,
		},
		{
			MethodName: "DeleteRepository",
			Handler:    _GitService_DeleteRepository_Handler,
		},
		{
			MethodName: "ForkRepository",
			Handler:    _GitService_ForkRepository_Handler,
		},
		{
			MethodName: "RenameRepository",
			Handler:    _GitService_RenameRepository_Handler,
		},
		{
			MethodName: "ValidateRepositoryName",
			Handler:    _GitService_ValidateRepositoryName_Handler,
		},
		{
			MethodName: "CreatePullRequest",
			Handler:    _GitService_CreatePullRequest_Handler,
		},
		{
			MethodName: "UpdatePullRequestStatus",
			Handler:    _GitService_UpdatePullRequestStatus_Handler,
		},
		{
			MethodName: "GetPullRequest",
			Handler:    _GitService_GetPullRequest_Handler,
		},
		{
			MethodName: "PullRequestLastCommitStatus",
			Handler:    _GitService_PullRequestLastCommitStatus_Handler,
		},
		{
			MethodName: "UpdateCommitStatus",
			Handler:    _GitService_UpdateCommitStatus_Handler,
		},
		{
			MethodName: "MergePullRequest",
			Handler:    _GitService_MergePullRequest_Handler,
		},
		{
			MethodName: "CreateWebhook",
			Handler:    _GitService_CreateWebhook_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _GitService_GetIssue_Handler,
		},
		{
			MethodName: "SearchIssues",
			Handler:    _GitService_SearchIssues_Handler,
		},
		{
			MethodName: "CreateIssue",
			Handler:    _GitService_CreateIssue_Handler,
		},
		{
			MethodName: "HasIssues",
			Handler:    _GitService_HasIssues_Handler,
		},
		{
			MethodName: "AddPRComment",
			Handler:    _GitService_AddPRComment_Handler,
		},
		{
			MethodName: "CreateIssueComment",
			Handler:    _GitService_CreateIssueComment_Handler,
		},
		{
			MethodName: "UpdateRelease",
			Handler:    _GitService_UpdateRelease_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRepositories",
			Handler:       _GitService_ListRepositories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPullRequestCommits",
			Handler:       _GitService_GetPullRequestCommits_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCommitStatus",
			Handler:       _GitService_ListCommitStatus_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListWebhooks",
			Handler:       _GitService_ListWebhooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateWebHook",
			Handler:       _GitService_UpdateWebHook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListReleases",
			Handler:       _GitService_ListReleases_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "git_service.proto",
}

func init() { proto.RegisterFile("git_service.proto", fileDescriptor_git_service_fbe83df51cd71da8) }

var fileDescriptor_git_service_fbe83df51cd71da8 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x0d, 0x2f, 0x88, 0xdd, 0x7e, 0xa8, 0x35, 0xda, 0x2a, 0x82, 0x78, 0xc9, 0x0f, 0xa8, 0x26,
	0xfa, 0x84, 0xd0, 0x10, 0xac, 0x5b, 0x3f, 0x50, 0x29, 0xa5, 0x15, 0xec, 0x11, 0xb9, 0xcd, 0x5d,
	0x67, 0x2d, 0x89, 0x8b, 0xed, 0x0c, 0x75, 0x3f, 0x99, 0x5f, 0x81, 0x12, 0xa7, 0xab, 0xb3, 0xc5,
	0x59, 0xa6, 0xbd, 0x1e, 0x9f, 0x7b, 0x7c, 0xee, 0xbd, 0xc7, 0x09, 0xb4, 0xd7, 0x4c, 0xfd, 0x96,
	0x28, 0x6e, 0xd8, 0x0a, 0xbb, 0x1b, 0xc1, 0x15, 0x27, 0x07, 0x72, 0x45, 0x83, 0x60, 0xfb, 0x97,
	0xae, 0xdd, 0x9a, 0xda, 0x6e, 0x50, 0x6a, 0xfc, 0xfd, 0xbf, 0x26, 0xc0, 0x90, 0xa9, 0x85, 0x26,
	0x93, 0xcf, 0x40, 0xc6, 0x11, 0x53, 0x8c, 0x06, 0xec, 0x16, 0x67, 0x82, 0xdf, 0x30, 0x1f, 0x05,
	0x79, 0xdd, 0xbd, 0xab, 0xee, 0xee, 0x40, 0xb7, 0x08, 0xf4, 0x1c, 0xd2, 0x83, 0xda, 0xcf, 0x8d,
	0x4f, 0x15, 0x8e, 0xa5, 0x8c, 0x91, 0xb4, 0x0c, 0x56, 0x8a, 0xb8, 0x0f, 0x10, 0xcf, 0x21, 0x03,
	0x68, 0x4d, 0x98, 0x54, 0x73, 0xdc, 0x70, 0xc9, 0x14, 0x17, 0x0c, 0x25, 0xe9, 0x18, 0xbc, 0xef,
	0x62, 0x4d, 0x23, 0x76, 0x4b, 0x15, 0xe3, 0x91, 0x7b, 0x68, 0x1c, 0xdc, 0x55, 0x6c, 0x3d, 0xe7,
	0xf8, 0x45, 0xa2, 0xd3, 0x17, 0x48, 0x15, 0xee, 0x71, 0xf2, 0xa6, 0x90, 0x3e, 0x8e, 0x2e, 0xb9,
	0x55, 0x89, 0xf4, 0xa1, 0x31, 0x44, 0xf5, 0x4c, 0x91, 0x33, 0x68, 0x9d, 0x61, 0x80, 0x39, 0x33,
	0xc5, 0x64, 0xd7, 0xec, 0xb5, 0xcf, 0xa3, 0x4b, 0x26, 0xc2, 0xb4, 0x57, 0xcf, 0x21, 0x9f, 0xa0,
	0x39, 0xe0, 0xe2, 0xda, 0xd0, 0x30, 0x07, 0x9f, 0x1c, 0x95, 0xbb, 0x38, 0x85, 0xd6, 0x1c, 0x23,
	0x1a, 0x56, 0x70, 0x61, 0xd5, 0x98, 0xc2, 0xd1, 0x2f, 0x1a, 0x30, 0x3f, 0x37, 0xd8, 0x29, 0x0d,
	0xb1, 0x6c, 0x2e, 0x25, 0x3d, 0x9d, 0x43, 0x5b, 0xaf, 0x69, 0x16, 0x07, 0xc1, 0x1c, 0xff, 0xc4,
	0x28, 0x15, 0x39, 0x32, 0xf3, 0xb4, 0xc7, 0x5d, 0x0b, 0xee, 0x39, 0x64, 0x02, 0x1d, 0x1d, 0x35,
	0x03, 0x5e, 0x28, 0xaa, 0x62, 0x69, 0x15, 0x2b, 0x31, 0x75, 0x0a, 0xcd, 0x21, 0xaa, 0xe7, 0x39,
	0x1a, 0xc0, 0x61, 0x5e, 0xa3, 0xcf, 0xc3, 0x90, 0x29, 0xbb, 0x9f, 0x76, 0xce, 0x4f, 0xc2, 0x4d,
	0x73, 0xfc, 0x15, 0xde, 0x1a, 0xac, 0x09, 0xdd, 0x09, 0x3d, 0xd2, 0x5d, 0x91, 0x5a, 0x12, 0x80,
	0xe4, 0x6d, 0xe5, 0x04, 0x1e, 0x12, 0xef, 0x4d, 0x66, 0xcf, 0x4d, 0xfd, 0x8c, 0x80, 0xe8, 0x49,
	0xe7, 0x54, 0x6c, 0x25, 0x25, 0x5a, 0xe4, 0x1c, 0x5a, 0xdf, 0x50, 0xac, 0x2b, 0x6d, 0xbe, 0xf4,
	0x55, 0x34, 0x74, 0x82, 0x2e, 0x70, 0x79, 0xc5, 0xf9, 0x35, 0x21, 0x06, 0x37, 0xc3, 0xca, 0xea,
	0x4f, 0xa0, 0x9e, 0x0c, 0x25, 0x63, 0x4a, 0xdb, 0x8b, 0x28, 0x50, 0x4d, 0xe7, 0xf1, 0x11, 0x1a,
	0x7a, 0x1e, 0x17, 0xb8, 0x1c, 0xd9, 0xae, 0xb7, 0x15, 0x1f, 0xc3, 0xab, 0x21, 0xaa, 0xa7, 0x7c,
	0x1e, 0x3f, 0x40, 0x7d, 0x81, 0x54, 0xac, 0xae, 0x52, 0x20, 0xef, 0x36, 0x85, 0x7e, 0xc4, 0x28,
	0xb6, 0x85, 0xa5, 0x3d, 0xa8, 0xe9, 0x41, 0x3d, 0xe5, 0xbe, 0x13, 0x38, 0x18, 0x51, 0x59, 0x70,
	0x59, 0xb5, 0x4f, 0xd6, 0x14, 0xea, 0x5f, 0x7c, 0x7f, 0x36, 0x4f, 0x56, 0x8f, 0x91, 0x22, 0xef,
	0x8a, 0xf7, 0x9b, 0x1d, 0xbb, 0xe5, 0xc7, 0x9e, 0x93, 0xa4, 0xcf, 0xe8, 0x61, 0xa7, 0xda, 0xb9,
	0x6f, 0x7c, 0xa7, 0x67, 0x3b, 0xd0, 0xb1, 0xd1, 0x7b, 0x9b, 0x63, 0x80, 0x54, 0x62, 0x6e, 0x6f,
	0x19, 0x56, 0x21, 0x36, 0x19, 0xb3, 0x52, 0x6c, 0x32, 0x6e, 0xb2, 0xf9, 0xe5, 0xcb, 0xf4, 0x9f,
	0xdb, 0xfb, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x4b, 0x33, 0x2d, 0xee, 0xa0, 0x07, 0x00, 0x00,
}
